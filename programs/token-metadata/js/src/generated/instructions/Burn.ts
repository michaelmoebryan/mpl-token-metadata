/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { BurnArgs, burnArgsBeet } from '../types/BurnArgs'

/**
 * @category Instructions
 * @category Burn
 * @category generated
 */
export type BurnInstructionArgs = {
  burnArgs: BurnArgs
}
/**
 * @category Instructions
 * @category Burn
 * @category generated
 */
export const BurnStruct = new beet.FixableBeetArgsStruct<
  BurnInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['burnArgs', burnArgsBeet],
  ],
  'BurnInstructionArgs'
)
/**
 * Accounts required by the _Burn_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [_writable_] collectionMetadata (optional)
 * @property [_writable_] metadata
 * @property [_writable_] edition (optional)
 * @property [_writable_] mint
 * @property [_writable_] token
 * @property [_writable_] masterEdition (optional)
 * @property [] masterEditionMint (optional)
 * @property [] masterEditionToken (optional)
 * @property [_writable_] editionMarker (optional)
 * @property [_writable_] tokenRecord (optional)
 * @property [] sysvarInstructions
 * @property [] splTokenProgram
 * @category Instructions
 * @category Burn
 * @category generated
 */
export type BurnInstructionAccounts = {
  authority: web3.PublicKey
  collectionMetadata?: web3.PublicKey
  metadata: web3.PublicKey
  edition?: web3.PublicKey
  mint: web3.PublicKey
  token: web3.PublicKey
  masterEdition?: web3.PublicKey
  masterEditionMint?: web3.PublicKey
  masterEditionToken?: web3.PublicKey
  editionMarker?: web3.PublicKey
  tokenRecord?: web3.PublicKey
  systemProgram?: web3.PublicKey
  sysvarInstructions: web3.PublicKey
  splTokenProgram: web3.PublicKey
}

export const burnInstructionDiscriminator = 41

/**
 * Creates a _Burn_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Burn
 * @category generated
 */
export function createBurnInstruction(
  accounts: BurnInstructionAccounts,
  args: BurnInstructionArgs,
  programId = new web3.PublicKey('Do6Z4U9XdZwCGBUUwhWZSCUC6bh96bmgzhqi9zmz8dQL')
) {
  const [data] = BurnStruct.serialize({
    instructionDiscriminator: burnInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
  ]

  if (accounts.collectionMetadata != null) {
    keys.push({
      pubkey: accounts.collectionMetadata,
      isWritable: true,
      isSigner: false,
    })
  }
  keys.push({
    pubkey: accounts.metadata,
    isWritable: true,
    isSigner: false,
  })
  if (accounts.edition != null) {
    if (accounts.collectionMetadata == null) {
      throw new Error(
        "When providing 'edition' then 'accounts.collectionMetadata' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.edition,
      isWritable: true,
      isSigner: false,
    })
  }
  keys.push({
    pubkey: accounts.mint,
    isWritable: true,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.token,
    isWritable: true,
    isSigner: false,
  })
  if (accounts.masterEdition != null) {
    if (accounts.collectionMetadata == null || accounts.edition == null) {
      throw new Error(
        "When providing 'masterEdition' then 'accounts.collectionMetadata', 'accounts.edition' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.masterEdition,
      isWritable: true,
      isSigner: false,
    })
  }
  if (accounts.masterEditionMint != null) {
    if (
      accounts.collectionMetadata == null ||
      accounts.edition == null ||
      accounts.masterEdition == null
    ) {
      throw new Error(
        "When providing 'masterEditionMint' then 'accounts.collectionMetadata', 'accounts.edition', 'accounts.masterEdition' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.masterEditionMint,
      isWritable: false,
      isSigner: false,
    })
  }
  if (accounts.masterEditionToken != null) {
    if (
      accounts.collectionMetadata == null ||
      accounts.edition == null ||
      accounts.masterEdition == null ||
      accounts.masterEditionMint == null
    ) {
      throw new Error(
        "When providing 'masterEditionToken' then 'accounts.collectionMetadata', 'accounts.edition', 'accounts.masterEdition', 'accounts.masterEditionMint' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.masterEditionToken,
      isWritable: false,
      isSigner: false,
    })
  }
  if (accounts.editionMarker != null) {
    if (
      accounts.collectionMetadata == null ||
      accounts.edition == null ||
      accounts.masterEdition == null ||
      accounts.masterEditionMint == null ||
      accounts.masterEditionToken == null
    ) {
      throw new Error(
        "When providing 'editionMarker' then 'accounts.collectionMetadata', 'accounts.edition', 'accounts.masterEdition', 'accounts.masterEditionMint', 'accounts.masterEditionToken' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.editionMarker,
      isWritable: true,
      isSigner: false,
    })
  }
  if (accounts.tokenRecord != null) {
    if (
      accounts.collectionMetadata == null ||
      accounts.edition == null ||
      accounts.masterEdition == null ||
      accounts.masterEditionMint == null ||
      accounts.masterEditionToken == null ||
      accounts.editionMarker == null
    ) {
      throw new Error(
        "When providing 'tokenRecord' then 'accounts.collectionMetadata', 'accounts.edition', 'accounts.masterEdition', 'accounts.masterEditionMint', 'accounts.masterEditionToken', 'accounts.editionMarker' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.tokenRecord,
      isWritable: true,
      isSigner: false,
    })
  }
  keys.push({
    pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
    isWritable: false,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.sysvarInstructions,
    isWritable: false,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.splTokenProgram,
    isWritable: false,
    isSigner: false,
  })

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
