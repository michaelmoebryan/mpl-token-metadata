/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { UseArgs, useArgsBeet } from '../types/UseArgs'

/**
 * @category Instructions
 * @category Use
 * @category generated
 */
export type UseInstructionArgs = {
  useArgs: UseArgs
}
/**
 * @category Instructions
 * @category Use
 * @category generated
 */
export const UseStruct = new beet.FixableBeetArgsStruct<
  UseInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['useArgs', useArgsBeet],
  ],
  'UseInstructionArgs'
)
/**
 * Accounts required by the _Use_ instruction
 *
 * @property [**signer**] authority
 * @property [_writable_] delegateRecord (optional)
 * @property [_writable_] token (optional)
 * @property [] mint
 * @property [_writable_] metadata
 * @property [_writable_] edition (optional)
 * @property [**signer**] payer
 * @property [] sysvarInstructions
 * @property [] splTokenProgram (optional)
 * @property [] authorizationRulesProgram (optional)
 * @property [] authorizationRules (optional)
 * @category Instructions
 * @category Use
 * @category generated
 */
export type UseInstructionAccounts = {
  authority: web3.PublicKey
  delegateRecord?: web3.PublicKey
  token?: web3.PublicKey
  mint: web3.PublicKey
  metadata: web3.PublicKey
  edition?: web3.PublicKey
  payer: web3.PublicKey
  systemProgram?: web3.PublicKey
  sysvarInstructions: web3.PublicKey
  splTokenProgram?: web3.PublicKey
  authorizationRulesProgram?: web3.PublicKey
  authorizationRules?: web3.PublicKey
}

export const useInstructionDiscriminator = 51

/**
 * Creates a _Use_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Use
 * @category generated
 */
export function createUseInstruction(
  accounts: UseInstructionAccounts,
  args: UseInstructionArgs,
  programId = new web3.PublicKey('Do6Z4U9XdZwCGBUUwhWZSCUC6bh96bmgzhqi9zmz8dQL')
) {
  const [data] = UseStruct.serialize({
    instructionDiscriminator: useInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
  ]

  if (accounts.delegateRecord != null) {
    keys.push({
      pubkey: accounts.delegateRecord,
      isWritable: true,
      isSigner: false,
    })
  }
  if (accounts.token != null) {
    if (accounts.delegateRecord == null) {
      throw new Error(
        "When providing 'token' then 'accounts.delegateRecord' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.token,
      isWritable: true,
      isSigner: false,
    })
  }
  keys.push({
    pubkey: accounts.mint,
    isWritable: false,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.metadata,
    isWritable: true,
    isSigner: false,
  })
  if (accounts.edition != null) {
    if (accounts.delegateRecord == null || accounts.token == null) {
      throw new Error(
        "When providing 'edition' then 'accounts.delegateRecord', 'accounts.token' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.edition,
      isWritable: true,
      isSigner: false,
    })
  }
  keys.push({
    pubkey: accounts.payer,
    isWritable: false,
    isSigner: true,
  })
  keys.push({
    pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
    isWritable: false,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.sysvarInstructions,
    isWritable: false,
    isSigner: false,
  })
  if (accounts.splTokenProgram != null) {
    if (
      accounts.delegateRecord == null ||
      accounts.token == null ||
      accounts.edition == null
    ) {
      throw new Error(
        "When providing 'splTokenProgram' then 'accounts.delegateRecord', 'accounts.token', 'accounts.edition' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.splTokenProgram,
      isWritable: false,
      isSigner: false,
    })
  }
  if (accounts.authorizationRulesProgram != null) {
    if (
      accounts.delegateRecord == null ||
      accounts.token == null ||
      accounts.edition == null ||
      accounts.splTokenProgram == null
    ) {
      throw new Error(
        "When providing 'authorizationRulesProgram' then 'accounts.delegateRecord', 'accounts.token', 'accounts.edition', 'accounts.splTokenProgram' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.authorizationRulesProgram,
      isWritable: false,
      isSigner: false,
    })
  }
  if (accounts.authorizationRules != null) {
    if (
      accounts.delegateRecord == null ||
      accounts.token == null ||
      accounts.edition == null ||
      accounts.splTokenProgram == null ||
      accounts.authorizationRulesProgram == null
    ) {
      throw new Error(
        "When providing 'authorizationRules' then 'accounts.delegateRecord', 'accounts.token', 'accounts.edition', 'accounts.splTokenProgram', 'accounts.authorizationRulesProgram' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.authorizationRules,
      isWritable: false,
      isSigner: false,
    })
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
