/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  VerificationArgs,
  verificationArgsBeet,
} from '../types/VerificationArgs'

/**
 * @category Instructions
 * @category Verify
 * @category generated
 */
export type VerifyInstructionArgs = {
  verificationArgs: VerificationArgs
}
/**
 * @category Instructions
 * @category Verify
 * @category generated
 */
export const VerifyStruct = new beet.BeetArgsStruct<
  VerifyInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['verificationArgs', verificationArgsBeet],
  ],
  'VerifyInstructionArgs'
)
/**
 * Accounts required by the _Verify_ instruction
 *
 * @property [**signer**] authority
 * @property [] delegateRecord (optional)
 * @property [_writable_] metadata
 * @property [] collectionMint (optional)
 * @property [_writable_] collectionMetadata (optional)
 * @property [] collectionMasterEdition (optional)
 * @property [] sysvarInstructions
 * @category Instructions
 * @category Verify
 * @category generated
 */
export type VerifyInstructionAccounts = {
  authority: web3.PublicKey
  delegateRecord?: web3.PublicKey
  metadata: web3.PublicKey
  collectionMint?: web3.PublicKey
  collectionMetadata?: web3.PublicKey
  collectionMasterEdition?: web3.PublicKey
  systemProgram?: web3.PublicKey
  sysvarInstructions: web3.PublicKey
}

export const verifyInstructionDiscriminator = 52

/**
 * Creates a _Verify_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Verify
 * @category generated
 */
export function createVerifyInstruction(
  accounts: VerifyInstructionAccounts,
  args: VerifyInstructionArgs,
  programId = new web3.PublicKey('Do6Z4U9XdZwCGBUUwhWZSCUC6bh96bmgzhqi9zmz8dQL')
) {
  const [data] = VerifyStruct.serialize({
    instructionDiscriminator: verifyInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
  ]

  if (accounts.delegateRecord != null) {
    keys.push({
      pubkey: accounts.delegateRecord,
      isWritable: false,
      isSigner: false,
    })
  }
  keys.push({
    pubkey: accounts.metadata,
    isWritable: true,
    isSigner: false,
  })
  if (accounts.collectionMint != null) {
    if (accounts.delegateRecord == null) {
      throw new Error(
        "When providing 'collectionMint' then 'accounts.delegateRecord' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.collectionMint,
      isWritable: false,
      isSigner: false,
    })
  }
  if (accounts.collectionMetadata != null) {
    if (accounts.delegateRecord == null || accounts.collectionMint == null) {
      throw new Error(
        "When providing 'collectionMetadata' then 'accounts.delegateRecord', 'accounts.collectionMint' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.collectionMetadata,
      isWritable: true,
      isSigner: false,
    })
  }
  if (accounts.collectionMasterEdition != null) {
    if (
      accounts.delegateRecord == null ||
      accounts.collectionMint == null ||
      accounts.collectionMetadata == null
    ) {
      throw new Error(
        "When providing 'collectionMasterEdition' then 'accounts.delegateRecord', 'accounts.collectionMint', 'accounts.collectionMetadata' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.collectionMasterEdition,
      isWritable: false,
      isSigner: false,
    })
  }
  keys.push({
    pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
    isWritable: false,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.sysvarInstructions,
    isWritable: false,
    isSigner: false,
  })

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
