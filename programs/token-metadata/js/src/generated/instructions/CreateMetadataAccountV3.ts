/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  CreateMetadataAccountArgsV3,
  createMetadataAccountArgsV3Beet,
} from '../types/CreateMetadataAccountArgsV3'

/**
 * @category Instructions
 * @category CreateMetadataAccountV3
 * @category generated
 */
export type CreateMetadataAccountV3InstructionArgs = {
  createMetadataAccountArgsV3: CreateMetadataAccountArgsV3
}
/**
 * @category Instructions
 * @category CreateMetadataAccountV3
 * @category generated
 */
export const CreateMetadataAccountV3Struct = new beet.FixableBeetArgsStruct<
  CreateMetadataAccountV3InstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['createMetadataAccountArgsV3', createMetadataAccountArgsV3Beet],
  ],
  'CreateMetadataAccountV3InstructionArgs'
)
/**
 * Accounts required by the _CreateMetadataAccountV3_ instruction
 *
 * @property [_writable_] metadata
 * @property [] mint
 * @property [**signer**] mintAuthority
 * @property [_writable_, **signer**] payer
 * @property [] updateAuthority
 * @category Instructions
 * @category CreateMetadataAccountV3
 * @category generated
 */
export type CreateMetadataAccountV3InstructionAccounts = {
  metadata: web3.PublicKey
  mint: web3.PublicKey
  mintAuthority: web3.PublicKey
  payer: web3.PublicKey
  updateAuthority: web3.PublicKey
  systemProgram?: web3.PublicKey
  rent?: web3.PublicKey
}

export const createMetadataAccountV3InstructionDiscriminator = 33

/**
 * Creates a _CreateMetadataAccountV3_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateMetadataAccountV3
 * @category generated
 */
export function createCreateMetadataAccountV3Instruction(
  accounts: CreateMetadataAccountV3InstructionAccounts,
  args: CreateMetadataAccountV3InstructionArgs,
  programId = new web3.PublicKey('Do6Z4U9XdZwCGBUUwhWZSCUC6bh96bmgzhqi9zmz8dQL')
) {
  const [data] = CreateMetadataAccountV3Struct.serialize({
    instructionDiscriminator: createMetadataAccountV3InstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.metadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.mintAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.updateAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.rent != null) {
    keys.push({
      pubkey: accounts.rent,
      isWritable: false,
      isSigner: false,
    })
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
