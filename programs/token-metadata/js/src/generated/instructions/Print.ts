/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { PrintArgs, printArgsBeet } from '../types/PrintArgs'

/**
 * @category Instructions
 * @category Print
 * @category generated
 */
export type PrintInstructionArgs = {
  printArgs: PrintArgs
}
/**
 * @category Instructions
 * @category Print
 * @category generated
 */
export const PrintStruct = new beet.FixableBeetArgsStruct<
  PrintInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['printArgs', printArgsBeet],
  ],
  'PrintInstructionArgs'
)
/**
 * Accounts required by the _Print_ instruction
 *
 * @property [_writable_] editionMetadata
 * @property [_writable_] edition
 * @property [_writable_] editionMint
 * @property [] editionTokenAccountOwner
 * @property [_writable_] editionTokenAccount
 * @property [**signer**] editionMintAuthority
 * @property [_writable_] editionTokenRecord (optional)
 * @property [_writable_] masterEdition
 * @property [_writable_] editionMarkerPda
 * @property [_writable_, **signer**] payer
 * @property [**signer**] masterTokenAccountOwner
 * @property [] masterTokenAccount
 * @property [] masterMetadata
 * @property [] updateAuthority
 * @property [] splTokenProgram
 * @property [] splAtaProgram
 * @property [] sysvarInstructions
 * @category Instructions
 * @category Print
 * @category generated
 */
export type PrintInstructionAccounts = {
  editionMetadata: web3.PublicKey
  edition: web3.PublicKey
  editionMint: web3.PublicKey
  editionTokenAccountOwner: web3.PublicKey
  editionTokenAccount: web3.PublicKey
  editionMintAuthority: web3.PublicKey
  editionTokenRecord?: web3.PublicKey
  masterEdition: web3.PublicKey
  editionMarkerPda: web3.PublicKey
  payer: web3.PublicKey
  masterTokenAccountOwner: web3.PublicKey
  masterTokenAccount: web3.PublicKey
  masterMetadata: web3.PublicKey
  updateAuthority: web3.PublicKey
  splTokenProgram: web3.PublicKey
  splAtaProgram: web3.PublicKey
  sysvarInstructions: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const printInstructionDiscriminator = 55

/**
 * Creates a _Print_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Print
 * @category generated
 */
export function createPrintInstruction(
  accounts: PrintInstructionAccounts,
  args: PrintInstructionArgs,
  programId = new web3.PublicKey('Do6Z4U9XdZwCGBUUwhWZSCUC6bh96bmgzhqi9zmz8dQL')
) {
  const [data] = PrintStruct.serialize({
    instructionDiscriminator: printInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.editionMetadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.edition,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.editionMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.editionTokenAccountOwner,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.editionTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.editionMintAuthority,
      isWritable: false,
      isSigner: true,
    },
  ]

  if (accounts.editionTokenRecord != null) {
    keys.push({
      pubkey: accounts.editionTokenRecord,
      isWritable: true,
      isSigner: false,
    })
  }
  keys.push({
    pubkey: accounts.masterEdition,
    isWritable: true,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.editionMarkerPda,
    isWritable: true,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.payer,
    isWritable: true,
    isSigner: true,
  })
  keys.push({
    pubkey: accounts.masterTokenAccountOwner,
    isWritable: false,
    isSigner: true,
  })
  keys.push({
    pubkey: accounts.masterTokenAccount,
    isWritable: false,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.masterMetadata,
    isWritable: false,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.updateAuthority,
    isWritable: false,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.splTokenProgram,
    isWritable: false,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.splAtaProgram,
    isWritable: false,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.sysvarInstructions,
    isWritable: false,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
    isWritable: false,
    isSigner: false,
  })

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
