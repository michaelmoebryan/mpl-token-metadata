/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { MintArgs, mintArgsBeet } from '../types/MintArgs'

/**
 * @category Instructions
 * @category Mint
 * @category generated
 */
export type MintInstructionArgs = {
  mintArgs: MintArgs
}
/**
 * @category Instructions
 * @category Mint
 * @category generated
 */
export const MintStruct = new beet.FixableBeetArgsStruct<
  MintInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['mintArgs', mintArgsBeet],
  ],
  'MintInstructionArgs'
)
/**
 * Accounts required by the _Mint_ instruction
 *
 * @property [_writable_] token
 * @property [] tokenOwner (optional)
 * @property [] metadata
 * @property [_writable_] masterEdition (optional)
 * @property [_writable_] tokenRecord (optional)
 * @property [_writable_] mint
 * @property [**signer**] authority
 * @property [] delegateRecord (optional)
 * @property [_writable_, **signer**] payer
 * @property [] sysvarInstructions
 * @property [] splTokenProgram
 * @property [] splAtaProgram
 * @property [] authorizationRulesProgram (optional)
 * @property [] authorizationRules (optional)
 * @category Instructions
 * @category Mint
 * @category generated
 */
export type MintInstructionAccounts = {
  token: web3.PublicKey
  tokenOwner?: web3.PublicKey
  metadata: web3.PublicKey
  masterEdition?: web3.PublicKey
  tokenRecord?: web3.PublicKey
  mint: web3.PublicKey
  authority: web3.PublicKey
  delegateRecord?: web3.PublicKey
  payer: web3.PublicKey
  systemProgram?: web3.PublicKey
  sysvarInstructions: web3.PublicKey
  splTokenProgram: web3.PublicKey
  splAtaProgram: web3.PublicKey
  authorizationRulesProgram?: web3.PublicKey
  authorizationRules?: web3.PublicKey
}

export const mintInstructionDiscriminator = 43

/**
 * Creates a _Mint_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Mint
 * @category generated
 */
export function createMintInstruction(
  accounts: MintInstructionAccounts,
  args: MintInstructionArgs,
  programId = new web3.PublicKey('Do6Z4U9XdZwCGBUUwhWZSCUC6bh96bmgzhqi9zmz8dQL')
) {
  const [data] = MintStruct.serialize({
    instructionDiscriminator: mintInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.token,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.tokenOwner != null) {
    keys.push({
      pubkey: accounts.tokenOwner,
      isWritable: false,
      isSigner: false,
    })
  }
  keys.push({
    pubkey: accounts.metadata,
    isWritable: false,
    isSigner: false,
  })
  if (accounts.masterEdition != null) {
    if (accounts.tokenOwner == null) {
      throw new Error(
        "When providing 'masterEdition' then 'accounts.tokenOwner' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.masterEdition,
      isWritable: true,
      isSigner: false,
    })
  }
  if (accounts.tokenRecord != null) {
    if (accounts.tokenOwner == null || accounts.masterEdition == null) {
      throw new Error(
        "When providing 'tokenRecord' then 'accounts.tokenOwner', 'accounts.masterEdition' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.tokenRecord,
      isWritable: true,
      isSigner: false,
    })
  }
  keys.push({
    pubkey: accounts.mint,
    isWritable: true,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.authority,
    isWritable: false,
    isSigner: true,
  })
  if (accounts.delegateRecord != null) {
    if (
      accounts.tokenOwner == null ||
      accounts.masterEdition == null ||
      accounts.tokenRecord == null
    ) {
      throw new Error(
        "When providing 'delegateRecord' then 'accounts.tokenOwner', 'accounts.masterEdition', 'accounts.tokenRecord' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.delegateRecord,
      isWritable: false,
      isSigner: false,
    })
  }
  keys.push({
    pubkey: accounts.payer,
    isWritable: true,
    isSigner: true,
  })
  keys.push({
    pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
    isWritable: false,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.sysvarInstructions,
    isWritable: false,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.splTokenProgram,
    isWritable: false,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.splAtaProgram,
    isWritable: false,
    isSigner: false,
  })
  if (accounts.authorizationRulesProgram != null) {
    if (
      accounts.tokenOwner == null ||
      accounts.masterEdition == null ||
      accounts.tokenRecord == null ||
      accounts.delegateRecord == null
    ) {
      throw new Error(
        "When providing 'authorizationRulesProgram' then 'accounts.tokenOwner', 'accounts.masterEdition', 'accounts.tokenRecord', 'accounts.delegateRecord' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.authorizationRulesProgram,
      isWritable: false,
      isSigner: false,
    })
  }
  if (accounts.authorizationRules != null) {
    if (
      accounts.tokenOwner == null ||
      accounts.masterEdition == null ||
      accounts.tokenRecord == null ||
      accounts.delegateRecord == null ||
      accounts.authorizationRulesProgram == null
    ) {
      throw new Error(
        "When providing 'authorizationRules' then 'accounts.tokenOwner', 'accounts.masterEdition', 'accounts.tokenRecord', 'accounts.delegateRecord', 'accounts.authorizationRulesProgram' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.authorizationRules,
      isWritable: false,
      isSigner: false,
    })
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
