/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { CreateArgs, createArgsBeet } from '../types/CreateArgs'

/**
 * @category Instructions
 * @category Create
 * @category generated
 */
export type CreateInstructionArgs = {
  createArgs: CreateArgs
}
/**
 * @category Instructions
 * @category Create
 * @category generated
 */
export const CreateStruct = new beet.FixableBeetArgsStruct<
  CreateInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['createArgs', createArgsBeet],
  ],
  'CreateInstructionArgs'
)
/**
 * Accounts required by the _Create_ instruction
 *
 * @property [_writable_] metadata
 * @property [_writable_] masterEdition (optional)
 * @property [_writable_] mint
 * @property [**signer**] authority
 * @property [_writable_, **signer**] payer
 * @property [] updateAuthority
 * @property [] sysvarInstructions
 * @property [] splTokenProgram
 * @category Instructions
 * @category Create
 * @category generated
 */
export type CreateInstructionAccounts = {
  metadata: web3.PublicKey
  masterEdition?: web3.PublicKey
  mint: web3.PublicKey
  authority: web3.PublicKey
  payer: web3.PublicKey
  updateAuthority: web3.PublicKey
  systemProgram?: web3.PublicKey
  sysvarInstructions: web3.PublicKey
  splTokenProgram: web3.PublicKey
}

export const createInstructionDiscriminator = 42

/**
 * Creates a _Create_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Create
 * @category generated
 */
export function createCreateInstruction(
  accounts: CreateInstructionAccounts,
  args: CreateInstructionArgs,
  programId = new web3.PublicKey('Do6Z4U9XdZwCGBUUwhWZSCUC6bh96bmgzhqi9zmz8dQL')
) {
  const [data] = CreateStruct.serialize({
    instructionDiscriminator: createInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.metadata,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.masterEdition != null) {
    keys.push({
      pubkey: accounts.masterEdition,
      isWritable: true,
      isSigner: false,
    })
  }
  keys.push({
    pubkey: accounts.mint,
    isWritable: true,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.authority,
    isWritable: false,
    isSigner: true,
  })
  keys.push({
    pubkey: accounts.payer,
    isWritable: true,
    isSigner: true,
  })
  keys.push({
    pubkey: accounts.updateAuthority,
    isWritable: false,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
    isWritable: false,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.sysvarInstructions,
    isWritable: false,
    isSigner: false,
  })
  keys.push({
    pubkey: accounts.splTokenProgram,
    isWritable: false,
    isSigner: false,
  })

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
